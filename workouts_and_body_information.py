# -*- coding: utf-8 -*-
"""workouts_and_body_information.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RvQhtjtFSJIVZTqUyFJ59TUYKglXxH1K
"""

import requests

def calculate_bmi(weight, height):
    """Vücut Kitle İndeksini (BMI) hesaplar."""
    height_m = height / 100  # Boyu metreye çevirir
    return round(weight / (height_m ** 2), 2)

def calculate_body_fat_percentage(gender, weight, waist, neck, height, hip=None):
    """Vücut yağ oranını hesaplar."""
    if gender.lower() == "male":
        body_fat = (86.010 * ((waist - neck) / height)) - (70.041 * (height / 100)) + 36.76
    elif gender.lower() == "female":
        if hip is None:
            raise ValueError("Kadınlar için kalça ölçüsü gereklidir.")
        else:
            body_fat = (163.205 * ((waist + hip - neck) / height)) - (97.684 * (height / 100)) - 78.387
    else:
        raise ValueError("Geçersiz cinsiyet. 'male' veya 'female' giriniz.")
    return round(body_fat, 2)


def main():
    print("Vücut Kitle İndeksi ve Yağ Oranı Hesaplama Programı")

    try:
        age = int(input("Yaşınızı giriniz: "))
        height = float(input("Boyunuzu (cm cinsinden) giriniz: "))
        weight = float(input("Kilonuzu (kg cinsinden) giriniz: "))
        gender = input("Cinsiyetinizi giriniz (male/female): ").strip().lower()

        waist = float(input("Bel ölçünüzü (cm cinsinden) giriniz: "))
        neck = float(input("Boyun ölçünüzü (cm cinsinden) giriniz: "))

        hip = None
        if gender == "female":
            hip = float(input("Kalça ölçünüzü (cm cinsinden) giriniz: "))

        # Hesaplamalar
        bmi = calculate_bmi(weight, height)
        body_fat = calculate_body_fat_percentage(gender, weight, waist, neck, height, hip)

        print(f"\nVücut Kitle İndeksiniz (BMI): {bmi}")
        print(f"Vücut Yağ Oranınız: {body_fat}%")

        # Ortalama ile kıyaslama yapmak
        if gender == "male":
            if 6 <= body_fat <= 13:
                print("Vücut yağ oranı normal.")
            elif body_fat < 6:
                print("Vücut yağ oranı düşük.")
            elif body_fat > 13:
                print("Vücut yağ oranı yüksek.")

            if 20 <= bmi <= 25:
                print("BMI normal.")
            elif bmi < 20:
                print("BMI düşük.")
            elif bmi > 25:
                print("BMI yüksek.")

        elif gender == "female":
            if 14 <= body_fat <= 20:
                print("Vücut yağ oranı normal.")
            elif body_fat < 14:
                print("Vücut yağ oranı düşük.")
            elif body_fat > 20:
                print("Vücut yağ oranı yüksek.")

            if 19 <= bmi <= 24:
                print("BMI normal.")
            elif bmi < 19:
                print("BMI düşük.")
            elif bmi > 24:
                print("BMI yüksek.")
        else:
            print("Geçersiz cinsiyet girdisi. Lütfen 'male' veya 'female' giriniz.")

    except Exception as e:
        print(f"Hata: {e}")

if __name__ == "__main__":
    main()

import matplotlib.pyplot as plt
import json

# Spor hareketleri ve hedefledikleri kas grupları
exercise_to_muscles = {
    "bench press": ["chest", "triceps"],
    "squat": ["legs", "glutes"],
    "deadlift": ["back", "legs"],
    "pull-up": ["back", "biceps"],
    "overhead press": ["shoulders", "triceps"],
    "barbell row": ["back", "biceps"],
    "plank": ["core"],
    "lunge": ["legs", "glutes"],
    "biceps curl": ["biceps", "forearms"],
    "leg press": ["legs"],
    "incline press": ["chest", "triceps"],
    "romanian deadlift": ["legs", "glutes"],
    "cable row": ["back", "biceps"],
    "fly": ["chest", "triceps"],
    "tricep dips": ["triceps"],
    "calf raise": ["legs"],
    "side plank": ["core"],
    "shoulder shrugs": ["shoulders", "back"],
    "chest machine": ["chest", "triceps"],
    "seated row": ["back", "biceps"],
    "hammer curl": ["biceps", "forearms"],
    "arnold press": ["shoulders", "triceps"],
    "goblet squat": ["legs", "core"],
    "step-up": ["legs", "glutes"],
    "push-up": ["chest", "triceps"],
    "mountain climbers": ["core", "legs"],
    "dumbbell shoulder press": ["shoulders", "triceps"],
    "farmer's walk": ["forearms", "core"],
    "leg raise": ["core"],
    "russian twist": ["core"],
    "cable crossover": ["chest", "triceps"],
    "reverse fly": ["back", "shoulders"],
    "side lunge": ["legs", "glutes"],
    "donkey kick": ["glutes"],
    "hip thrust": ["glutes", "legs"],
    "t-bar row": ["back", "biceps"],
    "cable pushdown": ["triceps"],
    "chest pullover": ["chest", "back"],
    "incline push-up": ["chest", "triceps"],
    "wall sit": ["legs", "core"],
    "cable lateral raise": ["shoulders"],
    "tricep kickback": ["triceps"],
    "face pull": ["shoulders", "back"],
    "deadlift high pull": ["back", "legs"],
    "leg curl": ["legs"],
    "dumbbell shrug": ["back"],
    "step-through lunge": ["legs", "glutes"],
    "suitcase carry": ["core"],
    "single-arm row": ["back", "biceps"],
    "good morning": ["legs", "back"],
    "weighted plank": ["core"],
    "bear crawl": ["core", "shoulders"],
    "overhead squat": ["legs", "core"],
    "reverse crunch": ["core"],
    "hollow body hold": ["core"],
    "turkish get-up": ["core", "shoulders"],
    "landmine twist": ["core"],
    "diamond push-up": ["chest", "triceps"],
    "trap bar deadlift": ["back", "legs"],
    "weighted step-up": ["legs", "glutes"],
    "reverse lunge": ["legs", "glutes"],
    "lat pulldown": ["back", "biceps"],
    "bent-over row": ["back", "biceps"],
    "incline fly": ["chest", "triceps"],
    "leg extension": ["legs", "glutes"],
    "jump squat": ["legs", "glutes"],
    "incline bench press": ["chest", "triceps"],
    "battle rope slams": ["core", "shoulders"],
    "skater lunge": ["legs", "glutes"],
    "front squat": ["legs", "core"],
    "bulgarian split squat": ["legs", "glutes"],
    "overhead triceps extension": ["triceps"],
    "front raise": ["shoulders"],
    "sissy squat": ["legs", "glutes"],
    "side plank raise": ["core"],
    "kettlebell swing": ["glutes", "shoulders"],
    "hanging leg raise": ["core"],
    "superman hold": ["back"],
    "weighted side plank": ["core"],
    "tire flip": ["legs", "core"],
    "med ball slam": ["core", "shoulders"],
    "jump lunge": ["legs", "core"],
    "glute bridge": ["glutes", "legs"],
    "push press": ["shoulders", "triceps"],
    "kettlebell clean": ["legs", "shoulders"],
    "windshield wipers": ["core"],
    "dumbbell row": ["back", "biceps"],
    "cable woodchopper": ["core"],
    "chest dip": ["chest", "triceps"],
    "sumo deadlift": ["legs", "glutes"],
    "zercher squat": ["legs", "core"],
    "pistol squat": ["legs", "glutes"],
    "burpee": ["legs", "core"],
    "spider curl": ["biceps", "forearms"],
    "incline curl": ["biceps", "forearms"],
    "band pull-apart": ["back", "shoulders"],
    "seated shoulder press": ["shoulders", "triceps"],
    "resistance band squat": ["legs","spider curl","glutes"],
    "cable lateral pull": ["back", "biceps"],
    "incline hammer curl": ["biceps", "forearms"],
    "reverse grip row": ["back", "biceps"],
    "chest fly machine": ["chest", "triceps"],
    "snatch-grip deadlift": ["back", "legs"],
    "reverse hyperextension": ["back", "glutes"],
    "elevated pike push-up": ["shoulders", "triceps"],
    "incline row": ["back", "biceps"],
    "chest machine press": ["chest", "triceps"],
    "deadlift variation": ["back", "legs"],
    "weighted pull-up": ["back", "biceps"],
    "reverse lateral raise": ["shoulders"],
    "cable front raise": ["shoulders"],
    "side lateral walk": ["glutes", "legs"],
    "reverse push-up": ["chest", "triceps"],
    "kettlebell snatch": ["shoulders", "legs"],
    "landmine press": ["shoulders", "core"],
    "overhead carry": ["core", "shoulders"],
    "cable kickback": ["glutes", "legs"],
    "suitcase deadlift": ["back", "legs"],
    "front plank": ["core"],
    "step-up variation": ["legs", "glutes"],
    "bicep curl variation": ["biceps", "forearms"],
    "overhead weighted plank": ["core"],
    "barbell front squat": ["legs", "core"],
    "weighted reverse crunch": ["core"],
    "single-arm dumbbell press": ["shoulders", "triceps"],
    "triceps pullover": ["triceps"],
    "leg raise machine": ["core"],
    "dumbbell press variation": ["chest", "triceps"],
    "oblique twist": ["core"]
    }
print("\n")

# Haftalık kas grubu kullanım verilerini saklamak için bir dosya adı oluşturmak
data_file = "muscle_usage_history.json"

# Haftalık kas grubu kullanım verilerini yüklemek
def load_muscle_usage_history():
    try:
        with open(data_file, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Kas grubu kullanım yüzdeleri hesaplamak
def calculate_percentages(muscle_usage):
    total_exercises = sum(muscle_usage.values())
    return {muscle: (count / total_exercises) * 100 for muscle, count in muscle_usage.items()} if total_exercises > 0 else {}

print("""Spor hareket listemiz aşağıdadır:
Bench press
Squat
Deadlift
Pull-up
Overhead press
Barbell row
Plank
Lunge
Biceps curl
Leg press
Incline press
Romanian deadlift
Cable row
Fly
Tricep dips
Calf raise
Side plank
Shoulder shrugs
Chest machine
Seated row
Hammer curl
Arnold press
Goblet squat
Step-up
Push-up
Mountain climbers
Dumbbell shoulder press
Farmer's walk
Leg raise
Russian twist
Cable crossover
Reverse fly
Side lunge
Donkey kick
Hip thrust
T-bar row
Cable pushdown
Chest pullover
Incline push-up
Wall sit
Cable lateral raise
Tricep kickback
Face pull
Deadlift high pull
Leg curl
Dumbbell shrug
Step-through lunge
Suitcase carry
Single-arm row
Good morning
Weighted plank
Bear crawl
Overhead squat
Reverse crunch
Hollow body hold
Turkish get-up
Landmine twist
Diamond push-up
Trap bar deadlift
Weighted step-up
Reverse lunge
Lat pulldown
Bent-over row
Incline fly
Leg extension
Jump squat
Incline bench press
Battle rope slams
Skater lunge
Front squat
Bulgarian split squat
Overhead triceps extension
Front raise
Sissy squat
Side plank raise
Kettlebell swing
Hanging leg raise
Superman hold
Weighted side plank
Tire flip
Med ball slam
Jump lunge
Glute bridge
Push press
Kettlebell clean
Windshield wipers
Dumbbell row
Cable woodchopper
Chest dip
Sumo deadlift
Zercher squat
Pistol squat
Burpee
Spider curl
Incline curl
Band pull-apart
Seated shoulder press
Resistance band squat
Cable lateral pull
Incline hammer curl
Reverse grip row
Chest fly machine
Snatch-grip deadlift
Reverse hyperextension
Elevated pike push-up
Incline row
Chest machine press
Deadlift variation
Weighted pull-up
Reverse lateral raise
Cable front raise
Side lateral walk
Reverse push-up
Kettlebell snatch
Landmine press
Overhead carry
Cable kickback
Suitcase deadlift
Front plank
Step-up variation
Bicep curl variation
Overhead weighted plank
Barbell front squat
Weighted reverse crunch
Single-arm dumbbell press
Triceps pullover
Leg raise machine
Dumbbell press variation
Oblique twist""")


# Kullanıcıdan 7 gün boyunca yaptığı egzersizleri almak
def get_user_exercises(week_num, muscle_usage):
    print(f"\n{week_num}. haftanın egzersizlerini girin:")
    for day in range(1, 8):
        exercises = input(f"{day}. gün yaptığınız spor hareketlerini girin (virgülle ayırın): ").strip().lower().split(", ")
        update_muscle_usage(muscle_usage, exercises)

    return calculate_percentages(muscle_usage)

# Kas grubu kullanım verisini güncellemek
def update_muscle_usage(muscle_usage, exercises):
    for exercise in exercises:
        if exercise in exercise_to_muscles:
            for muscle in exercise_to_muscles[exercise]:
                muscle_usage[muscle] += 1
        else:
            print(f"'{exercise}' bilinmiyor.")

# Haftalık verileri kaydetmek
def save_muscle_usage_history(muscle_usage_history):
    with open(data_file, "w") as file:
        json.dump(muscle_usage_history, file)

# Haftalık puanları takip etmek
def track_points(percentage):
    points = 0
    for muscle, percent in percentage.items():
        if 5 <= percent < 6:
            points += 5
        elif 6 <= percent < 7:
            points += 6
        elif 7 <= percent < 8:
            points += 7
        elif 8 <= percent < 9:
            points += 8
        elif 9 <= percent < 10:
            points += 9
        elif 10 <= percent < 12:
            points += 10
        elif 12 <= percent < 13:
            points += 9
        elif 13 <= percent < 14:
            points += 8
        elif 14 <= percent < 15:
            points += 7
        elif 15 <= percent < 16:
            points += 6
        elif 16 <= percent < 17:
            points += 5
    return points


# Haftalık verileri kaydet ve grafikleri göstermek
def track_points_and_plot(week_num, muscle_usage, muscle_usage_history, weekly_points):
    # Kas grubu kullanım yüzdelerini hesaplamak
    percentages = calculate_percentages(muscle_usage)

    # Haftalık verileri kaydetmek
    muscle_usage_history.append({
        "week": week_num,
        "muscle_usage": percentages
    })
    save_muscle_usage_history(muscle_usage_history)

    # Haftalık kas grubu kullanım yüzdelerini yazdırmak
    print(f"\n{week_num}. haftanın kas grubu kullanım yüzdeleri:")
    for muscle, percentage in percentages.items():
        print(f"{muscle.capitalize()}: {percentage:.2f}%")

    # Puanları hesaplamak
    points = track_points(percentages)
    print(f"\n{week_num}. hafta için aldığınız toplam puan: {points} puan.")

    # Haftalık puanları kaydetmek
    weekly_points.append(points)

    # Grafik için 2 adet alt grafik oluşturmak
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

    # 1. Grafik: Kas grubu kullanım yüzdelerini gösteren pasta grafiği
    muscles = list(percentages.keys())
    usage_percentages = list(percentages.values())

    ax1.pie(usage_percentages, labels=muscles, autopct='%1.1f%%', startangle=90)
    ax1.axis('equal')  # Daire şekli
    ax1.set_title(f"{week_num}. Haftanın Kas Grubu Kullanım Yüzdeleri")

    # 2. Grafik: Haftalık alınan puanları gösteren çubuk grafiği
    ax2.bar(range(1, len(weekly_points) + 1), weekly_points, color='skyblue')
    ax2.set_xlabel("Hafta")
    ax2.set_ylabel("Toplam Puan")
    ax2.set_title("Haftalık Alınan Puanlar")
    ax2.set_xticks(range(1, len(weekly_points) + 1))

    # Grafikleri göstermek
    plt.tight_layout()
    plt.show()


# Ana fonksiyon
def main():
    muscle_usage_history = load_muscle_usage_history()
    weekly_points = []

    # Her hafta için egzersiz verilerini al ve kas grubu kullanımını takip etmek
    for week_num in range(1, 6):
        # Kas grubu kullanımını başlatmak
        all_muscles = set(muscle for muscles in exercise_to_muscles.values() for muscle in muscles)
        muscle_usage = {muscle: 0 for muscle in all_muscles}

        # Kullanıcıdan egzersiz verilerini almak
        get_user_exercises(week_num, muscle_usage)

        # Haftalık veriyi kaydet ve grafiklerinizi oluşturmak
        track_points_and_plot(week_num, muscle_usage, muscle_usage_history, weekly_points)

if __name__ == "__main__":
    main()